function [A_lon,B_lon,A_lat,B_lat] = compute_ss_model(filename,x_trim,u_trim)
% x_trim is the trimmed state,
% u_trim is the trimmed input
  
% add stuff here  

% Va_trim = P.Va0;
% u_star = x_trim(4);
% v_star = x_trim(5);
% w_star = x_trim(6);
% phi_trim = x_trim(7);
% theta_trim = x_trim(8);
% psi_trim = x_trim(9);
% p_star = x_trim(10);
% q_star = x_trim(11);
% r_star = x_trim(12);
% delta_e_trim = u_trim(1);
% delta_a_trim = u_trim(2);
% delta_r_trim = u_trim(3);
% delta_t_trim = u_trim(4);
% alpha_trim = atan2(w_star/u_star);
% beta_trim = asin(v_star/sqrt(u_star+v_star+w_star));
% 
% gamma  = P.Jx*P.Jz - P.Jxz^2;
% gamma1 = P.Jxz*(P.Jx-P.Jy+P.Jz)/gamma;
% gamma2 = (P.Jz*(P.Jz-P.Jy) + P.Jxz^2)/gamma;
% gamma3 = P.Jz/gamma;
% gamma4 = P.Jxz/gamma;
% gamma5 = (P.Jz - P.Jx)/P.Jy;
% gamma6 = P.Jxz/P.Jy;
% gamma7 = ((P.Jx-P.Jy)*P.Jx+P.Jxz^2)/gamma;
% gamma8 = P.Jx/gamma;
% 
% % Compute aerodynamic coefficients of lift and drag
% sigma = (1+exp(-P.M*(alpha-P.alpha0))+exp(P.M*(alpha+P.alpha0)))/((1+exp(-P.M*(alpha-P.alpha0)))*(1+exp(P.M*(alpha+P.alpha0)))); % Sigmoid blending function
% C_L = (1-sigma)*(P.C_L_0 + P.C_L_alpha*alpha_trim) + sigma*(2*sign(alpha_trim)*(sin(alpha_trim))^2*cos(alpha_trim)); % Coefficient of lift
% C_D = P.C_D_p + (P.C_L_0+P.C_L_alpha*alpha_trim)^2/(pi*P.e*((P.b)^2/P.S_wing)); % Coefficient of drag
% 
% % Compute force coefficients acting on body-frame
% C_X = -C_D*cos(alpha_trim) + C_L*sin(alpha_trim); % Force coefficient due to lift and drag along body x-axis
% C_X_q = -P.C_D_q*cos(alpha_trim) + P.C_L_q*sin(alpha_trim); % Force coefficient due to pitch rate along body x-axis
% C_X_delta_e = -P.C_D_delta_e*cos(alpha_trim) + P.C_L_delta_e*sin(alpha_trim); % Force coefficient due to del_e along body x-axis
% C_Z = -C_D*sin(alpha_trim) - C_L*cos(alpha_trim); % Force coefficient due to lift and drag along body z-axis
% C_Z_q = -P.C_D_q*sin(alpha_trim) - P.C_L_q*cos(alpha_trim); % Force coefficient due to pitch rate along body z-axis
% C_Z_delta_e = -P.C_D_delta_e*sin(alpha_trim) - P.C_L_delta_e*cos(alpha_trim); % Force coefficient due to del_e along body z-axis
% 
% Y_v = P.rho*P.S_wing*P.b*v_star/(4*P.mass*Va_trim)*(P.C_Y_p*p_star + P.C_Y_r*r_star) + ...
%     P.rho*P.S_wing*v_star/P.mass*(P.C_Y_0 + P.C_Y_beta*beta_trim + P.C_Y_delta_a*delta_a_trim + P.C_Y_delta_r*delta_r_trim) + ...
%     P.rho*P.S_wing*P.C_Y_beta/(2*P.mass)*sqrt(u_star^2 + w_star^2);
% Y_p = w_star + P.rho*Va_trim*P.S_wing*P.b/(4*P.mass)*P.C_Y_p;
% Y_r = -u_star + P.rho*Va_trim*P.S_wing*P.b/(4*P.mass)*P.C_Y_r;
% Y_delta_a = P.rho*Va_trim^2*P.S_wing/(2*P.mass)*P.P.C_Y_delta_a;
% Y_delta_r = P.rho*Va_trim^2*P.S_wing/(2*P.mass)*P.P.C_Y_delta_r;
% L_v = P.rho*P.S_wing*(P.b)^2*v_star/(4*Va_trim)*(P.C_ell_p*p_star + P.C_ell_r*r_star) + ...
%     P.rho*P.S_wing*P.b*v_star*(P.C_ell_0 + P.C_ell_beta*beta_trim + P.C_ell_delta_a*delta_a_trim + P.C_ell_delta_r*delta_r_trim) + ...
%     P.rho*P.S_wing*P.b*P.C_ell_beta/2*sqrt(u_star^2 + w_star^2);
% L_p = gamma1*q_star + P.rho*Va_trim*P.S_wing*(P.b)^2/4*P.C_ell_p;
% L_r = -gamma2*q_star + P.rho*Va_trim*P.S_wing*(P.b)^2/4*P.C_ell_r;
% L_delta_a = P.rho*Va_trim^2*P.S_wing*P.b/2*P.C_ell_delta_a;
% L_delta_r =P.rho*Va_trim^2*P.S_wing*P.b/2*P.C_ell_delta_r;
% N_v = P.rho*P.S_wing*(P.b)^2*v_star/(4*Va_trim)*(P.C_n_p*p_star + P.C_n_r*r_star) + ...
%     P.rho*P.S_wing*P.b*v_star*(P.C_n_0 + P.C_n_beta*beta_trim + P.C_n_delta_a*delta_a_trim + P.C_n_delta_r*delta_r_trim) + ...
%     P.rho*P.S_wing*P.b*P.C_n_beta/2*sqrt(u_star^2 + w_star^2);
% N_p = gamma7*q_star + P.rho*Va_trim*P.S_wing*(P.b)^2/4*P.C_n_p;
% N_r = -gamma1*q_star + P.rho*Va_trim*P.S_wing*(P.b)^2/4*P.C_n_p;
% N_delta_a = P.rho*Va_trim^2*P.S_wing*P.b/2*P.C_n_delta_a;
% N_delta_r = P.rho*Va_trim^2*P.S_wing*P.b/2*P.C_n_delta_r;
% 
% X_u = u_star*P.rho*P.S_wing/P.mass*(C_X+C_X_q*P.c*q_star/(2*Va_trim)+C_X_delta_e*delta_e_trim) + ...
%     -P.rho*P.S_prop*P.C_Prop*u_star/P.mass;
% X_w = -q_star + ...
%     w_star*P.rho*P.S_wing/P.mass*(C_X+C_X_q*P.c*q_star/(2*Va_trim)+C_X_delta_e*delta_e_trim) + ...
%     -P.rho*P.S_prop*P.C_Prop*w_star/P.mass;
% X_q = -w_star + ...
%     P.rho*Va_trim*P.S_wing*C_X_q/(4*P.mass);
% X_delta_e = P.rho*Va_trim^2*P.S_wing*C_X_delta_e/(2*P.mass);
% X_delta_t = P.rho*P.S_prop*P.C_prop*P.k_motor^2*delta_t_trim/P.mass;
% Z_u = q_star + ...
%     u_star*P.rho*P.S_wing/P.mass*(C_Z+C_Z_q*P.c*q_star/(2*Va_trim)+C_Z_delta_e*delta_e_trim);
% Z_w = w_star*P.rho*P.S_wing/P.mass*(C_Z+C_Z_q*P.c*q_star/(2*Va_trim)+C_Z_delta_e*delta_e_trim);
% Z_q = u_star + ...
%     P.rho*Va_trim*P.S_wing*C_Z_q/(4*P.mass);
% Z_delta_e = P.rho*Va_trim^2*P.S_wing*C_Z_delta_e/(2*P.mass);
% M_u = u_star*P.rho*P.S_wing*P.c/P.Jy*(P.C_m_0 + P.C_m_alpha*alpha_trim + P.C_m_delta_e*delta_e_trim) + ...
%     -P.rho*P.S_wing*P.c*P.C_m_alpha*w_star/(2*P.Jy) + ...
%     P.rho*P.S_wing*(P.c)^2*P.C_m_q*q_star*u_star/(4*P.Jy*Va_trim);
% M_w = w_star*P.rho*P.S_wing*P.c/P.Jy*(P.C_m_0 + P.C_m_alpha*alpha_trim + P.C_m_delta_e*delta_e_trim) + ...
%     -P.rho*P.S_wing*P.c*P.C_m_alpha*u_star/(2*P.Jy) + ...
%     P.rho*P.S_wing*(P.c)^2*P.C_m_q*q_star*w_star/(4*P.Jy*Va_trim);
% M_q = P.rho*Va_trim*P.S_wing*(P.c)^2*P.C_m_q/(4*P.Jy);
% M_delta_e = P.rho*Va_trim^2*P.S_wing*P.c*P.C_m_delta_e/(4*P.Jy);
% 
% A_lon = [X_u X_w X_q -g*cos(theta_trim) 0; ...
%          Z_u Z_w Z_q -g*sin(theta_trim) 0; ...
%          M_u M_w M_q 0 0; ...
%          0 0 0 0 0; ...
%          sin(theta_trim) -cos(theta_trim) 0 u_star*cos(theta_trim)+w_star*sin(theta_trim) 0];
% B_lon = [X_delta_e X_delta_t; ...
%          Z_delta_e 0; ...
%          M_delta_e 0; ...
%          0 0;...
%          0 0];
% A_lat = [Y_v Y_p Y_r g*cos(theta_trim)*cos(phi_trim) 0; ...
%          L_v L_p L_r 0 0; ...
%          N_v N_p N_r 0 0; ...
%          0 1 cos(phi_trim)*tan(theta_trim) q_star*cos(phi_trim)*tan(theta_trim)-r_star*sin(phi_trim)*tan(theta_trim) 0; ...
%          0 0 cos(phi_trim)/cos(theta_trim) p_star*cos(phi_trim)/cos(theta_trim)-r_star*sin(phi_trim)/cos(theta_trim) 0];
% B_lat = [Y_delta_a Y_delta_r; ...
%          L_delta_a L_delta_r; ...
%          N_delta_a N_delta_r; ...
%          0 0;...
%          0 0];

[A,B,C,D]=linmod(filename,x_trim,u_trim);

E1 = [...
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0;...
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;...
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;...
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0;...
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0;...
];
E2 = [...
0, 1, 0, 0;...
0, 0, 1, 0;...
];
A_lat = E1 * A * E1';
B_lat = E1 * B * E2';

E1 = [...
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0;...
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0;...
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0;...
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;...
0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0;...
];
E2 = [...
1, 0, 0, 0;...
0, 0, 0, 1;...
];
A_lon = E1 * A * E1';
B_lon = E1 * B * E2';